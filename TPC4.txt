# Import datasets, classifiers and performance metrics
from sklearn import datasets, tree, model_selection
from sklearn.ensemble import RandomForestClassifier
from matplotlib.colors import ListedColormap
from sklearn.metrics import accuracy_score # use 'accuracy_score' to calculate the accuracy of the predicted labels.
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

from sklearn.naive_bayes import GaussianNB
gnb = GaussianNB()

# The digits dataset
digits = datasets.load_digits()


#modelo  Decision Tree
[features_train, features_test, classes_train, classes_test] = model_selection.train_test_split(digits.data, digits.target, test_size=0.30, random_state = 100) 
model = tree.DecisionTreeClassifier()

clf = model.fit(features_train, classes_train)

#prever as labels do test set
prever = model.predict(features_test)


score_train = model.score(features_train, classes_train)
score_test = model.score(features_test, classes_test)

#Extrair os dados
MyShape = digits.data

print('Shape: ',MyShape.shape )
#print(MyShape[:4])

print('\n\tDecision Tree')
print('==============================')
print("Features:", digits.target_names)
print("score_train:", score_train)
print("score_test:", score_test)
print('==============================')


#modelo Random Forrest

model = RandomForestClassifier(n_estimators=1000)

clf = model.fit(features_train, classes_train)

score_train = model.score(features_train, classes_train)
score_test = model.score(features_test, classes_test)

print('\n\tRandom Forrest')
print('==============================')
print("score_train:", score_train)
print("score_test:", score_test)
print('==============================')

#Modelo Naive Bayes
y_pred = gnb.fit(features_train, classes_train)

score_train = gnb.score(features_train, classes_train)
score_test = gnb.score(features_test, classes_test)

print('\n\tNaive Bayes')
print('==============================')
print("score_train:", score_train)
print("score_test:", score_test)
print('==============================')
    
